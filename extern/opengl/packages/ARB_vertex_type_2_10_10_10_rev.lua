return {
  basicTypes = {
    GLenum = "unsigned int";
    GLuint = "unsigned int";
    GLboolean = "unsigned char";
  };
  magicNumbers = {
    UNSIGNED_INT_2_10_10_10_REV = 0x8368;
    INT_2_10_10_10_REV = 0x8D9F;
  };
  funcs = {
    {'VertexP2ui';
      'GLenum', 'type';
      'UInt32', 'value'};
    {'VertexP2uiv';
      'GLenum', 'type';
      'const UInt32*', 'value'};
    {'VertexP3ui';
      'GLenum', 'type';
      'UInt32', 'value'};
    {'VertexP3uiv';
      'GLenum', 'type';
      'const UInt32*', 'value'};
    {'VertexP4ui';
      'GLenum', 'type';
      'UInt32', 'value'};
    {'VertexP4uiv';
      'GLenum', 'type';
      'const UInt32*', 'value'};
    {'TexCoordP1ui';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'TexCoordP1uiv';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'TexCoordP2ui';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'TexCoordP2uiv';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'TexCoordP3ui';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'TexCoordP3uiv';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'TexCoordP4ui';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'TexCoordP4uiv';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'MultiTexCoordP1ui';
      'GLenum', 'texture';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'MultiTexCoordP1uiv';
      'GLenum', 'texture';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'MultiTexCoordP2ui';
      'GLenum', 'texture';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'MultiTexCoordP2uiv';
      'GLenum', 'texture';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'MultiTexCoordP3ui';
      'GLenum', 'texture';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'MultiTexCoordP3uiv';
      'GLenum', 'texture';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'MultiTexCoordP4ui';
      'GLenum', 'texture';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'MultiTexCoordP4uiv';
      'GLenum', 'texture';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'NormalP3ui';
      'GLenum', 'type';
      'UInt32', 'coords'};
    {'NormalP3uiv';
      'GLenum', 'type';
      'const UInt32*', 'coords'};
    {'ColorP3ui';
      'GLenum', 'type';
      'UInt32', 'color'};
    {'ColorP3uiv';
      'GLenum', 'type';
      'const UInt32*', 'color'};
    {'ColorP4ui';
      'GLenum', 'type';
      'UInt32', 'color'};
    {'ColorP4uiv';
      'GLenum', 'type';
      'const UInt32*', 'color'};
    {'SecondaryColorP3ui';
      'GLenum', 'type';
      'UInt32', 'color'};
    {'SecondaryColorP3uiv';
      'GLenum', 'type';
      'const UInt32*', 'color'};
    {'VertexAttribP1ui';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'UInt32', 'value'};
    {'VertexAttribP1uiv';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'const UInt32*', 'value'};
    {'VertexAttribP2ui';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'UInt32', 'value'};
    {'VertexAttribP2uiv';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'const UInt32*', 'value'};
    {'VertexAttribP3ui';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'UInt32', 'value'};
    {'VertexAttribP3uiv';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'const UInt32*', 'value'};
    {'VertexAttribP4ui';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'UInt32', 'value'};
    {'VertexAttribP4uiv';
      'UInt32', 'index';
      'GLenum', 'type';
      'Boolean', 'normalized';
      'const UInt32*', 'value'};
  };
}
