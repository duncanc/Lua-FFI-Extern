return {
  inherits = {
    require 'extern.opengl.packages.VERSION_1_4';
  };
  basicTypes = {
    GLintptr = "ptrdiff_t";
    GLsizeiptr = "ptrdiff_t";
  };
  typeAliases = {
    ConstUInt32 = "GLuint";
    ConstVoid = "GLvoid";
    BufferOffset = "GLintptr";
    BufferSize = "GLsizeiptr";
    BufferAccessARB = "GLenum";
    BufferPNameARB = "GLenum";
    BufferPointerNameARB = "GLenum";
    BufferTargetARB = "GLenum";
    BufferUsageARB = "GLenum";
  };
  magicNumbers = {
    BUFFER_SIZE = 0x8764;
    BUFFER_USAGE = 0x8765;
    QUERY_COUNTER_BITS = 0x8864;
    CURRENT_QUERY = 0x8865;
    QUERY_RESULT = 0x8866;
    QUERY_RESULT_AVAILABLE = 0x8867;
    ARRAY_BUFFER = 0x8892;
    ELEMENT_ARRAY_BUFFER = 0x8893;
    ARRAY_BUFFER_BINDING = 0x8894;
    ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
    READ_ONLY = 0x88B8;
    WRITE_ONLY = 0x88B9;
    READ_WRITE = 0x88BA;
    BUFFER_ACCESS = 0x88BB;
    BUFFER_MAPPED = 0x88BC;
    BUFFER_MAP_POINTER = 0x88BD;
    STREAM_DRAW = 0x88E0;
    STREAM_READ = 0x88E1;
    STREAM_COPY = 0x88E2;
    STATIC_DRAW = 0x88E4;
    STATIC_READ = 0x88E5;
    STATIC_COPY = 0x88E6;
    DYNAMIC_DRAW = 0x88E8;
    DYNAMIC_READ = 0x88E9;
    DYNAMIC_COPY = 0x88EA;
    SAMPLES_PASSED = 0x8914;
    VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
    NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
    COLOR_ARRAY_BUFFER_BINDING = 0x8898;
    INDEX_ARRAY_BUFFER_BINDING = 0x8899;
    TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
    EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
    SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
    FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
    WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
    FOG_COORD_SRC = 0x8450;
    FOG_COORD = 0x8451;
    CURRENT_FOG_COORD = 0x8453;
    FOG_COORD_ARRAY_TYPE = 0x8454;
    FOG_COORD_ARRAY_STRIDE = 0x8455;
    FOG_COORD_ARRAY_POINTER = 0x8456;
    FOG_COORD_ARRAY = 0x8457;
    FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
    SRC0_RGB = 0x8580;
    SRC1_RGB = 0x8581;
    SRC2_RGB = 0x8582;
    SRC0_ALPHA = 0x8588;
    SRC1_ALPHA = 0x8589;
    SRC2_ALPHA = 0x858A;
  };
  funcs = {
    {'GenQueries';
      'SizeI', 'n';
      'UInt32*', 'ids'};
    {'DeleteQueries';
      'SizeI', 'n';
      'const UInt32*', 'ids'};
    {'IsQuery', ret='Boolean';
      'UInt32', 'id'};
    {'BeginQuery';
      'GLenum', 'target';
      'UInt32', 'id'};
    {'EndQuery';
      'GLenum', 'target'};
    {'GetQueryiv';
      'GLenum', 'target';
      'GLenum', 'pname';
      'Int32*', 'params'};
    {'GetQueryObjectiv';
      'UInt32', 'id';
      'GLenum', 'pname';
      'Int32*', 'params'};
    {'GetQueryObjectuiv';
      'UInt32', 'id';
      'GLenum', 'pname';
      'UInt32*', 'params'};
    {'BindBuffer';
      'BufferTargetARB', 'target';
      'UInt32', 'buffer'};
    {'DeleteBuffers';
      'SizeI', 'n';
      'const ConstUInt32*', 'buffers'};
    {'GenBuffers';
      'SizeI', 'n';
      'UInt32*', 'buffers'};
    {'IsBuffer', ret='Boolean';
      'UInt32', 'buffer'};
    {'BufferData';
      'BufferTargetARB', 'target';
      'BufferSize', 'size';
      'const ConstVoid*', 'data';
      'BufferUsageARB', 'usage'};
    {'BufferSubData';
      'BufferTargetARB', 'target';
      'BufferOffset', 'offset';
      'BufferSize', 'size';
      'const ConstVoid*', 'data'};
    {'GetBufferSubData';
      'BufferTargetARB', 'target';
      'BufferOffset', 'offset';
      'BufferSize', 'size';
      'Void*', 'data'};
    {'MapBuffer', ret='VoidPointer';
      'BufferTargetARB', 'target';
      'BufferAccessARB', 'access'};
    {'UnmapBuffer', ret='Boolean';
      'BufferTargetARB', 'target'};
    {'GetBufferParameteriv';
      'BufferTargetARB', 'target';
      'BufferPNameARB', 'pname';
      'Int32*', 'params'};
    {'GetBufferPointerv';
      'BufferTargetARB', 'target';
      'BufferPointerNameARB', 'pname';
      'VoidPointer*', 'params'};
  };
}
