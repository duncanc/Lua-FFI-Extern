return {
  inherits = {
    require 'extern.opengl.packages.VERSION_2_1';
    require 'extern.opengl.packages.ARB_framebuffer_object';
    require 'extern.opengl.packages.ARB_map_buffer_range';
  };
  typeAliases = {
    ClampColorTargetARB = "GLenum";
    ClampColorModeARB = "GLenum";
    DrawBufferName = "GLint";
    VertexAttribEnum = "GLenum";
    TypeEnum = "GLenum";
  };
  magicNumbers = {
    COMPARE_REF_TO_TEXTURE = 0x884E;
    CLIP_DISTANCE0 = 0x3000;
    CLIP_DISTANCE1 = 0x3001;
    CLIP_DISTANCE2 = 0x3002;
    CLIP_DISTANCE3 = 0x3003;
    CLIP_DISTANCE4 = 0x3004;
    CLIP_DISTANCE5 = 0x3005;
    CLIP_DISTANCE6 = 0x3006;
    CLIP_DISTANCE7 = 0x3007;
    MAX_CLIP_DISTANCES = 0x0D32;
    MAJOR_VERSION = 0x821B;
    MINOR_VERSION = 0x821C;
    NUM_EXTENSIONS = 0x821D;
    CONTEXT_FLAGS = 0x821E;
    DEPTH_BUFFER = 0x8223;
    STENCIL_BUFFER = 0x8224;
    COMPRESSED_RED = 0x8225;
    COMPRESSED_RG = 0x8226;
    CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001;
    RGBA32F = 0x8814;
    RGB32F = 0x8815;
    RGBA16F = 0x881A;
    RGB16F = 0x881B;
    VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
    MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
    MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
    CLAMP_READ_COLOR = 0x891C;
    FIXED_ONLY = 0x891D;
    MAX_VARYING_COMPONENTS = 0x8B4B;
    TEXTURE_1D_ARRAY = 0x8C18;
    PROXY_TEXTURE_1D_ARRAY = 0x8C19;
    TEXTURE_2D_ARRAY = 0x8C1A;
    PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
    TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
    TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
    R11F_G11F_B10F = 0x8C3A;
    UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    RGB9_E5 = 0x8C3D;
    UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
    TEXTURE_SHARED_SIZE = 0x8C3F;
    TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
    TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
    TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
    TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
    PRIMITIVES_GENERATED = 0x8C87;
    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
    RASTERIZER_DISCARD = 0x8C89;
    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
    INTERLEAVED_ATTRIBS = 0x8C8C;
    SEPARATE_ATTRIBS = 0x8C8D;
    TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
    TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
    RGBA32UI = 0x8D70;
    RGB32UI = 0x8D71;
    RGBA16UI = 0x8D76;
    RGB16UI = 0x8D77;
    RGBA8UI = 0x8D7C;
    RGB8UI = 0x8D7D;
    RGBA32I = 0x8D82;
    RGB32I = 0x8D83;
    RGBA16I = 0x8D88;
    RGB16I = 0x8D89;
    RGBA8I = 0x8D8E;
    RGB8I = 0x8D8F;
    RED_INTEGER = 0x8D94;
    GREEN_INTEGER = 0x8D95;
    BLUE_INTEGER = 0x8D96;
    RGB_INTEGER = 0x8D98;
    RGBA_INTEGER = 0x8D99;
    BGR_INTEGER = 0x8D9A;
    BGRA_INTEGER = 0x8D9B;
    SAMPLER_1D_ARRAY = 0x8DC0;
    SAMPLER_2D_ARRAY = 0x8DC1;
    SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
    SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
    SAMPLER_CUBE_SHADOW = 0x8DC5;
    UNSIGNED_INT_VEC2 = 0x8DC6;
    UNSIGNED_INT_VEC3 = 0x8DC7;
    UNSIGNED_INT_VEC4 = 0x8DC8;
    INT_SAMPLER_1D = 0x8DC9;
    INT_SAMPLER_2D = 0x8DCA;
    INT_SAMPLER_3D = 0x8DCB;
    INT_SAMPLER_CUBE = 0x8DCC;
    INT_SAMPLER_1D_ARRAY = 0x8DCE;
    INT_SAMPLER_2D_ARRAY = 0x8DCF;
    UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
    UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
    UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
    UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
    UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
    UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
    QUERY_WAIT = 0x8E13;
    QUERY_NO_WAIT = 0x8E14;
    QUERY_BY_REGION_WAIT = 0x8E15;
    QUERY_BY_REGION_NO_WAIT = 0x8E16;
    BUFFER_ACCESS_FLAGS = 0x911F;
    BUFFER_MAP_LENGTH = 0x9120;
    BUFFER_MAP_OFFSET = 0x9121;
    DEPTH_COMPONENT32F = 0x8CAC;
    DEPTH32F_STENCIL8 = 0x8CAD;
    FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    INVALID_FRAMEBUFFER_OPERATION = 0x0506;
    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
    FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
    FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
    FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
    FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
    FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
    FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
    FRAMEBUFFER_DEFAULT = 0x8218;
    FRAMEBUFFER_UNDEFINED = 0x8219;
    DEPTH_STENCIL_ATTACHMENT = 0x821A;
    INDEX = 0x8222;
    MAX_RENDERBUFFER_SIZE = 0x84E8;
    DEPTH_STENCIL = 0x84F9;
    UNSIGNED_INT_24_8 = 0x84FA;
    DEPTH24_STENCIL8 = 0x88F0;
    TEXTURE_STENCIL_SIZE = 0x88F1;
    TEXTURE_RED_TYPE = 0x8C10;
    TEXTURE_GREEN_TYPE = 0x8C11;
    TEXTURE_BLUE_TYPE = 0x8C12;
    TEXTURE_ALPHA_TYPE = 0x8C13;
    TEXTURE_DEPTH_TYPE = 0x8C16;
    UNSIGNED_NORMALIZED = 0x8C17;
    FRAMEBUFFER_BINDING = 0x8CA6;
    DRAW_FRAMEBUFFER_BINDING = GL_FRAMEBUFFER_BINDING;
    RENDERBUFFER_BINDING = 0x8CA7;
    READ_FRAMEBUFFER = 0x8CA8;
    DRAW_FRAMEBUFFER = 0x8CA9;
    READ_FRAMEBUFFER_BINDING = 0x8CAA;
    RENDERBUFFER_SAMPLES = 0x8CAB;
    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
    FRAMEBUFFER_COMPLETE = 0x8CD5;
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
    FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
    FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
    MAX_COLOR_ATTACHMENTS = 0x8CDF;
    COLOR_ATTACHMENT0 = 0x8CE0;
    COLOR_ATTACHMENT1 = 0x8CE1;
    COLOR_ATTACHMENT2 = 0x8CE2;
    COLOR_ATTACHMENT3 = 0x8CE3;
    COLOR_ATTACHMENT4 = 0x8CE4;
    COLOR_ATTACHMENT5 = 0x8CE5;
    COLOR_ATTACHMENT6 = 0x8CE6;
    COLOR_ATTACHMENT7 = 0x8CE7;
    COLOR_ATTACHMENT8 = 0x8CE8;
    COLOR_ATTACHMENT9 = 0x8CE9;
    COLOR_ATTACHMENT10 = 0x8CEA;
    COLOR_ATTACHMENT11 = 0x8CEB;
    COLOR_ATTACHMENT12 = 0x8CEC;
    COLOR_ATTACHMENT13 = 0x8CED;
    COLOR_ATTACHMENT14 = 0x8CEE;
    COLOR_ATTACHMENT15 = 0x8CEF;
    DEPTH_ATTACHMENT = 0x8D00;
    STENCIL_ATTACHMENT = 0x8D20;
    FRAMEBUFFER = 0x8D40;
    RENDERBUFFER = 0x8D41;
    RENDERBUFFER_WIDTH = 0x8D42;
    RENDERBUFFER_HEIGHT = 0x8D43;
    RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
    STENCIL_INDEX1 = 0x8D46;
    STENCIL_INDEX4 = 0x8D47;
    STENCIL_INDEX8 = 0x8D48;
    STENCIL_INDEX16 = 0x8D49;
    RENDERBUFFER_RED_SIZE = 0x8D50;
    RENDERBUFFER_GREEN_SIZE = 0x8D51;
    RENDERBUFFER_BLUE_SIZE = 0x8D52;
    RENDERBUFFER_ALPHA_SIZE = 0x8D53;
    RENDERBUFFER_DEPTH_SIZE = 0x8D54;
    RENDERBUFFER_STENCIL_SIZE = 0x8D55;
    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
    MAX_SAMPLES = 0x8D57;
    FRAMEBUFFER_SRGB = 0x8DB9;
    HALF_FLOAT = 0x140B;
    MAP_READ_BIT = 0x0001;
    MAP_WRITE_BIT = 0x0002;
    MAP_INVALIDATE_RANGE_BIT = 0x0004;
    MAP_INVALIDATE_BUFFER_BIT = 0x0008;
    MAP_FLUSH_EXPLICIT_BIT = 0x0010;
    MAP_UNSYNCHRONIZED_BIT = 0x0020;
    COMPRESSED_RED_RGTC1 = 0x8DBB;
    COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
    COMPRESSED_RG_RGTC2 = 0x8DBD;
    COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
    RG = 0x8227;
    RG_INTEGER = 0x8228;
    R8 = 0x8229;
    R16 = 0x822A;
    RG8 = 0x822B;
    RG16 = 0x822C;
    R16F = 0x822D;
    R32F = 0x822E;
    RG16F = 0x822F;
    RG32F = 0x8230;
    R8I = 0x8231;
    R8UI = 0x8232;
    R16I = 0x8233;
    R16UI = 0x8234;
    R32I = 0x8235;
    R32UI = 0x8236;
    RG8I = 0x8237;
    RG8UI = 0x8238;
    RG16I = 0x8239;
    RG16UI = 0x823A;
    RG32I = 0x823B;
    RG32UI = 0x823C;
    VERTEX_ARRAY_BINDING = 0x85B5;
    CLAMP_VERTEX_COLOR = 0x891A;
    CLAMP_FRAGMENT_COLOR = 0x891B;
    ALPHA_INTEGER = 0x8D97;
    TEXTURE_LUMINANCE_TYPE = 0x8C14;
    TEXTURE_INTENSITY_TYPE = 0x8C15;
  };
  funcs = {
    {'ColorMaski';
      'UInt32', 'index';
      'Boolean', 'r';
      'Boolean', 'g';
      'Boolean', 'b';
      'Boolean', 'a'};
    {'GetBooleani_v';
      'GLenum', 'target';
      'UInt32', 'index';
      'Boolean*', 'data'};
    {'GetIntegeri_v';
      'GLenum', 'target';
      'UInt32', 'index';
      'Int32*', 'data'};
    {'Enablei';
      'GLenum', 'target';
      'UInt32', 'index'};
    {'Disablei';
      'GLenum', 'target';
      'UInt32', 'index'};
    {'IsEnabledi', ret='Boolean';
      'GLenum', 'target';
      'UInt32', 'index'};
    {'BeginTransformFeedback';
      'GLenum', 'primitiveMode'};
    {'EndTransformFeedback'};
    {'BindBufferRange';
      'GLenum', 'target';
      'UInt32', 'index';
      'UInt32', 'buffer';
      'BufferOffset', 'offset';
      'BufferSize', 'size'};
    {'BindBufferBase';
      'GLenum', 'target';
      'UInt32', 'index';
      'UInt32', 'buffer'};
    {'TransformFeedbackVaryings';
      'UInt32', 'program';
      'SizeI', 'count';
      'const CharPointer*', 'varyings';
      'GLenum', 'bufferMode'};
    {'GetTransformFeedbackVarying';
      'UInt32', 'program';
      'UInt32', 'index';
      'SizeI', 'bufSize';
      'SizeI*', 'length';
      'SizeI*', 'size';
      'GLenum*', 'type';
      'Char*', 'name'};
    {'ClampColor';
      'ClampColorTargetARB', 'target';
      'ClampColorModeARB', 'clamp'};
    {'BeginConditionalRender';
      'UInt32', 'id';
      'TypeEnum', 'mode'};
    {'EndConditionalRender'};
    {'VertexAttribIPointer';
      'UInt32', 'index';
      'Int32', 'size';
      'VertexAttribEnum', 'type';
      'SizeI', 'stride';
      'const Void*', 'pointer'};
    {'GetVertexAttribIiv';
      'UInt32', 'index';
      'VertexAttribEnum', 'pname';
      'Int32*', 'params'};
    {'GetVertexAttribIuiv';
      'UInt32', 'index';
      'VertexAttribEnum', 'pname';
      'UInt32*', 'params'};
    {'VertexAttribI1i', deprecated='3.1';
      'UInt32', 'index';
      'Int32', 'x'};
    {'VertexAttribI2i', deprecated='3.1';
      'UInt32', 'index';
      'Int32', 'x';
      'Int32', 'y'};
    {'VertexAttribI3i', deprecated='3.1';
      'UInt32', 'index';
      'Int32', 'x';
      'Int32', 'y';
      'Int32', 'z'};
    {'VertexAttribI4i', deprecated='3.1';
      'UInt32', 'index';
      'Int32', 'x';
      'Int32', 'y';
      'Int32', 'z';
      'Int32', 'w'};
    {'VertexAttribI1ui', deprecated='3.1';
      'UInt32', 'index';
      'UInt32', 'x'};
    {'VertexAttribI2ui', deprecated='3.1';
      'UInt32', 'index';
      'UInt32', 'x';
      'UInt32', 'y'};
    {'VertexAttribI3ui', deprecated='3.1';
      'UInt32', 'index';
      'UInt32', 'x';
      'UInt32', 'y';
      'UInt32', 'z'};
    {'VertexAttribI4ui', deprecated='3.1';
      'UInt32', 'index';
      'UInt32', 'x';
      'UInt32', 'y';
      'UInt32', 'z';
      'UInt32', 'w'};
    {'VertexAttribI1iv', deprecated='3.1';
      'UInt32', 'index';
      'const Int32*', 'v'};
    {'VertexAttribI2iv', deprecated='3.1';
      'UInt32', 'index';
      'const Int32*', 'v'};
    {'VertexAttribI3iv', deprecated='3.1';
      'UInt32', 'index';
      'const Int32*', 'v'};
    {'VertexAttribI4iv', deprecated='3.1';
      'UInt32', 'index';
      'const Int32*', 'v'};
    {'VertexAttribI1uiv', deprecated='3.1';
      'UInt32', 'index';
      'const UInt32*', 'v'};
    {'VertexAttribI2uiv', deprecated='3.1';
      'UInt32', 'index';
      'const UInt32*', 'v'};
    {'VertexAttribI3uiv', deprecated='3.1';
      'UInt32', 'index';
      'const UInt32*', 'v'};
    {'VertexAttribI4uiv', deprecated='3.1';
      'UInt32', 'index';
      'const UInt32*', 'v'};
    {'VertexAttribI4bv', deprecated='3.1';
      'UInt32', 'index';
      'const Int8*', 'v'};
    {'VertexAttribI4sv', deprecated='3.1';
      'UInt32', 'index';
      'const Int16*', 'v'};
    {'VertexAttribI4ubv', deprecated='3.1';
      'UInt32', 'index';
      'const UInt8*', 'v'};
    {'VertexAttribI4usv', deprecated='3.1';
      'UInt32', 'index';
      'const UInt16*', 'v'};
    {'GetUniformuiv';
      'UInt32', 'program';
      'Int32', 'location';
      'UInt32*', 'params'};
    {'BindFragDataLocation';
      'UInt32', 'program';
      'UInt32', 'color';
      'const Char*', 'name'};
    {'GetFragDataLocation', ret='Int32';
      'UInt32', 'program';
      'const Char*', 'name'};
    {'Uniform1ui';
      'Int32', 'location';
      'UInt32', 'v0'};
    {'Uniform2ui';
      'Int32', 'location';
      'UInt32', 'v0';
      'UInt32', 'v1'};
    {'Uniform3ui';
      'Int32', 'location';
      'UInt32', 'v0';
      'UInt32', 'v1';
      'UInt32', 'v2'};
    {'Uniform4ui';
      'Int32', 'location';
      'UInt32', 'v0';
      'UInt32', 'v1';
      'UInt32', 'v2';
      'UInt32', 'v3'};
    {'Uniform1uiv';
      'Int32', 'location';
      'SizeI', 'count';
      'const UInt32*', 'value'};
    {'Uniform2uiv';
      'Int32', 'location';
      'SizeI', 'count';
      'const UInt32*', 'value'};
    {'Uniform3uiv';
      'Int32', 'location';
      'SizeI', 'count';
      'const UInt32*', 'value'};
    {'Uniform4uiv';
      'Int32', 'location';
      'SizeI', 'count';
      'const UInt32*', 'value'};
    {'TexParameterIiv';
      'TextureTarget', 'target';
      'TextureParameterName', 'pname';
      'const Int32*', 'params'};
    {'TexParameterIuiv';
      'TextureTarget', 'target';
      'TextureParameterName', 'pname';
      'const UInt32*', 'params'};
    {'GetTexParameterIiv';
      'TextureTarget', 'target';
      'GetTextureParameter', 'pname';
      'Int32*', 'params'};
    {'GetTexParameterIuiv';
      'TextureTarget', 'target';
      'GetTextureParameter', 'pname';
      'UInt32*', 'params'};
    {'ClearBufferiv';
      'GLenum', 'buffer';
      'DrawBufferName', 'drawbuffer';
      'const Int32*', 'value'};
    {'ClearBufferuiv';
      'GLenum', 'buffer';
      'DrawBufferName', 'drawbuffer';
      'const UInt32*', 'value'};
    {'ClearBufferfv';
      'GLenum', 'buffer';
      'DrawBufferName', 'drawbuffer';
      'const Float32*', 'value'};
    {'ClearBufferfi';
      'GLenum', 'buffer';
      'DrawBufferName', 'drawbuffer';
      'Float32', 'depth';
      'Int32', 'stencil'};
    {'GetStringi', ret='String';
      'GLenum', 'name';
      'UInt32', 'index'};
  };
}
