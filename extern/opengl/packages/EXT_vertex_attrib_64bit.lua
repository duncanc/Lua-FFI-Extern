return {
  basicTypes = {
    GLuint = "unsigned int";
    GLdouble = "double";
    GLint = "int";
    GLenum = "unsigned int";
    GLsizei = "int";
    GLvoid = "void";
    GLintptr = "ptrdiff_t";
  };
  typeAliases = {
    UInt32 = "GLuint";
    Float64 = "GLdouble";
    Int32 = "GLint";
    SizeI = "GLsizei";
    Void = "GLvoid";
    BufferOffset = "GLintptr";
  };
  magicNumbers = {
    DOUBLE = 0x140A;
    DOUBLE_VEC2_EXT = 0x8FFC;
    DOUBLE_VEC3_EXT = 0x8FFD;
    DOUBLE_VEC4_EXT = 0x8FFE;
    DOUBLE_MAT2_EXT = 0x8F46;
    DOUBLE_MAT3_EXT = 0x8F47;
    DOUBLE_MAT4_EXT = 0x8F48;
    DOUBLE_MAT2x3_EXT = 0x8F49;
    DOUBLE_MAT2x4_EXT = 0x8F4A;
    DOUBLE_MAT3x2_EXT = 0x8F4B;
    DOUBLE_MAT3x4_EXT = 0x8F4C;
    DOUBLE_MAT4x2_EXT = 0x8F4D;
    DOUBLE_MAT4x3_EXT = 0x8F4E;
  };
  funcs = {
    {'VertexAttribL1dEXT';
      'UInt32', 'index';
      'Float64', 'x'};
    {'VertexAttribL2dEXT';
      'UInt32', 'index';
      'Float64', 'x';
      'Float64', 'y'};
    {'VertexAttribL3dEXT';
      'UInt32', 'index';
      'Float64', 'x';
      'Float64', 'y';
      'Float64', 'z'};
    {'VertexAttribL4dEXT';
      'UInt32', 'index';
      'Float64', 'x';
      'Float64', 'y';
      'Float64', 'z';
      'Float64', 'w'};
    {'VertexAttribL1dvEXT';
      'UInt32', 'index';
      'const Float64*', 'v'};
    {'VertexAttribL2dvEXT';
      'UInt32', 'index';
      'const Float64*', 'v'};
    {'VertexAttribL3dvEXT';
      'UInt32', 'index';
      'const Float64*', 'v'};
    {'VertexAttribL4dvEXT';
      'UInt32', 'index';
      'const Float64*', 'v'};
    {'VertexAttribLPointerEXT';
      'UInt32', 'index';
      'Int32', 'size';
      'GLenum', 'type';
      'SizeI', 'stride';
      'const Void*', 'pointer'};
    {'GetVertexAttribLdvEXT';
      'UInt32', 'index';
      'GLenum', 'pname';
      'Float64*', 'params'};
    {'VertexArrayVertexAttribLOffsetEXT';
      'UInt32', 'vaobj';
      'UInt32', 'buffer';
      'UInt32', 'index';
      'Int32', 'size';
      'GLenum', 'type';
      'SizeI', 'stride';
      'BufferOffset', 'offset'};
  };
}
