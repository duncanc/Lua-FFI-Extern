return {
  inherits = {
    require 'extern.opengl.packages.VERSION_3_3';
    require 'extern.opengl.packages.ARB_texture_query_lod';
    require 'extern.opengl.packages.ARB_draw_indirect';
    require 'extern.opengl.packages.ARB_gpu_shader5';
    require 'extern.opengl.packages.ARB_gpu_shader_fp64';
    require 'extern.opengl.packages.ARB_shader_subroutine';
    require 'extern.opengl.packages.ARB_tessellation_shader';
    require 'extern.opengl.packages.ARB_texture_buffer_object_rgb32';
    require 'extern.opengl.packages.ARB_texture_cube_map_array';
    require 'extern.opengl.packages.ARB_texture_gather';
    require 'extern.opengl.packages.ARB_transform_feedback2';
    require 'extern.opengl.packages.ARB_transform_feedback3';
  };
  magicNumbers = {
    SAMPLE_SHADING = 0x8C36;
    MIN_SAMPLE_SHADING_VALUE = 0x8C37;
    MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
    MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
    TEXTURE_CUBE_MAP_ARRAY = 0x9009;
    TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
    PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
    SAMPLER_CUBE_MAP_ARRAY = 0x900C;
    SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
    INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
    UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
    DRAW_INDIRECT_BUFFER = 0x8F3F;
    DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
    GEOMETRY_SHADER_INVOCATIONS = 0x887F;
    MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
    MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
    MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
    FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
    MAX_VERTEX_STREAMS = 0x8E71;
    DOUBLE_VEC2 = 0x8FFC;
    DOUBLE_VEC3 = 0x8FFD;
    DOUBLE_VEC4 = 0x8FFE;
    DOUBLE_MAT2 = 0x8F46;
    DOUBLE_MAT3 = 0x8F47;
    DOUBLE_MAT4 = 0x8F48;
    DOUBLE_MAT2x3 = 0x8F49;
    DOUBLE_MAT2x4 = 0x8F4A;
    DOUBLE_MAT3x2 = 0x8F4B;
    DOUBLE_MAT3x4 = 0x8F4C;
    DOUBLE_MAT4x2 = 0x8F4D;
    DOUBLE_MAT4x3 = 0x8F4E;
    ACTIVE_SUBROUTINES = 0x8DE5;
    ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
    ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
    ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
    ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
    MAX_SUBROUTINES = 0x8DE7;
    MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
    NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
    COMPATIBLE_SUBROUTINES = 0x8E4B;
    PATCHES = 0x000E;
    PATCH_VERTICES = 0x8E72;
    PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
    PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
    TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
    TESS_GEN_MODE = 0x8E76;
    TESS_GEN_SPACING = 0x8E77;
    TESS_GEN_VERTEX_ORDER = 0x8E78;
    TESS_GEN_POINT_MODE = 0x8E79;
    ISOLINES = 0x8E7A;
    FRACTIONAL_ODD = 0x8E7B;
    FRACTIONAL_EVEN = 0x8E7C;
    MAX_PATCH_VERTICES = 0x8E7D;
    MAX_TESS_GEN_LEVEL = 0x8E7E;
    MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
    MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
    MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
    MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
    MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
    MAX_TESS_PATCH_COMPONENTS = 0x8E84;
    MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
    MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
    MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
    MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
    MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
    MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
    MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
    MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
    UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
    UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
    TESS_EVALUATION_SHADER = 0x8E87;
    TESS_CONTROL_SHADER = 0x8E88;
    TRANSFORM_FEEDBACK = 0x8E22;
    TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
    TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
    TRANSFORM_FEEDBACK_BINDING = 0x8E25;
    MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
    MAX_VERTEX_STREAMS = 0x8E71;
  };
  funcs = {
    {'MinSampleShading';
      'ClampedColorF', 'value'};
    {'BlendEquationi';
      'UInt32', 'buf';
      'GLenum', 'mode'};
    {'BlendEquationSeparatei';
      'UInt32', 'buf';
      'GLenum', 'modeRGB';
      'GLenum', 'modeAlpha'};
    {'BlendFunci';
      'UInt32', 'buf';
      'GLenum', 'src';
      'GLenum', 'dst'};
    {'BlendFuncSeparatei';
      'UInt32', 'buf';
      'GLenum', 'srcRGB';
      'GLenum', 'dstRGB';
      'GLenum', 'srcAlpha';
      'GLenum', 'dstAlpha'};
  };
}
