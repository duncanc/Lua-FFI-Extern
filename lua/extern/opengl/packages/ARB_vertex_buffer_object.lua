return {
  basicTypes = {
    GLenum = "unsigned int";
    GLuint = "unsigned int";
    GLsizei = "int";
    GLuint = "unsigned int";
    GLboolean = "unsigned char";
    GLsizeiptrARB = "ptrdiff_t";
    GLvoid = "void";
    GLenum = "unsigned int";
    GLintptrARB = "ptrdiff_t";
    GLvoid = "void";
    GLvoid = "void";
    GLenum = "unsigned int";
    GLenum = "unsigned int";
    GLint = "int";
    GLenum = "unsigned int";
  };
  typeAliases = {
    BufferTargetARB = "GLenum";
    UInt32 = "GLuint";
    SizeI = "GLsizei";
    ConstUInt32 = "GLuint";
    Boolean = "GLboolean";
    BufferSizeARB = "GLsizeiptrARB";
    ConstVoid = "GLvoid";
    BufferUsageARB = "GLenum";
    BufferOffsetARB = "GLintptrARB";
    Void = "GLvoid";
    VoidPointer = "GLvoid*";
    BufferAccessARB = "GLenum";
    BufferPNameARB = "GLenum";
    Int32 = "GLint";
    BufferPointerNameARB = "GLenum";
  };
  magicNumbers = {
    BUFFER_SIZE_ARB = 0x8764;
    BUFFER_USAGE_ARB = 0x8765;
    ARRAY_BUFFER_ARB = 0x8892;
    ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
    ARRAY_BUFFER_BINDING_ARB = 0x8894;
    ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
    VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
    NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
    COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
    INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
    TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
    EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
    SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
    FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
    WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
    READ_ONLY_ARB = 0x88B8;
    WRITE_ONLY_ARB = 0x88B9;
    READ_WRITE_ARB = 0x88BA;
    BUFFER_ACCESS_ARB = 0x88BB;
    BUFFER_MAPPED_ARB = 0x88BC;
    BUFFER_MAP_POINTER_ARB = 0x88BD;
    STREAM_DRAW_ARB = 0x88E0;
    STREAM_READ_ARB = 0x88E1;
    STREAM_COPY_ARB = 0x88E2;
    STATIC_DRAW_ARB = 0x88E4;
    STATIC_READ_ARB = 0x88E5;
    STATIC_COPY_ARB = 0x88E6;
    DYNAMIC_DRAW_ARB = 0x88E8;
    DYNAMIC_READ_ARB = 0x88E9;
    DYNAMIC_COPY_ARB = 0x88EA;
  };
  funcs = {
    {'BindBufferARB';
      'BufferTargetARB', 'target';
      'UInt32', 'buffer'};
    {'DeleteBuffersARB';
      'SizeI', 'n';
      'const ConstUInt32*', 'buffers'};
    {'GenBuffersARB';
      'SizeI', 'n';
      'UInt32*', 'buffers'};
    {'IsBufferARB', ret='Boolean';
      'UInt32', 'buffer'};
    {'BufferDataARB';
      'BufferTargetARB', 'target';
      'BufferSizeARB', 'size';
      'const ConstVoid*', 'data';
      'BufferUsageARB', 'usage'};
    {'BufferSubDataARB';
      'BufferTargetARB', 'target';
      'BufferOffsetARB', 'offset';
      'BufferSizeARB', 'size';
      'const ConstVoid*', 'data'};
    {'GetBufferSubDataARB';
      'BufferTargetARB', 'target';
      'BufferOffsetARB', 'offset';
      'BufferSizeARB', 'size';
      'Void*', 'data'};
    {'MapBufferARB', ret='VoidPointer';
      'BufferTargetARB', 'target';
      'BufferAccessARB', 'access'};
    {'UnmapBufferARB', ret='Boolean';
      'BufferTargetARB', 'target'};
    {'GetBufferParameterivARB';
      'BufferTargetARB', 'target';
      'BufferPNameARB', 'pname';
      'Int32*', 'params'};
    {'GetBufferPointervARB';
      'BufferTargetARB', 'target';
      'BufferPointerNameARB', 'pname';
      'VoidPointer*', 'params'};
  };
}
